// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ERC20Ina.sol";
import "./ERC20.sol";

//only work in testnet/main
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract TOKEN is ERC20{

    constructor()
    ERC20("WETH","WETH"){
        _mint(msg.sender, 100000 * 10 ** decimals());
    }    
}

contract INAtestnet is ERC20Ina{
    address privateSaleBank;
    address publicSaleBank;
    address vurseIncentivizing;
    address marketingPartnership;
    address founderTeam;
    address advisers;
    address companyReserves;
    address lpReward;
    address futuresDevelopment;

    address owner;
    bool privateSaleControl = true;
    

    address usdtContract;
    address maticContract;
    address wEthContract;

    // Only work in testnet/main
    AggregatorV3Interface internal priceFeedEthUsd;
    AggregatorV3Interface internal priceFeedMaticUsd;

    constructor()
    ERC20Ina("INANI token","INA"){
        owner = msg.sender;
        privateSaleBank = 0x4804C4C73faD55C28339E235F72b589e612783D3;
        publicSaleBank = 0x8d08C957b80c0f96a4b2a8c610A8a28Bc4255b6c;
        vurseIncentivizing = 0xCF45Ad8A84A2656817F6382DA029d2F0D963bcD9;
        marketingPartnership = 0xa198776F5229cCe2b6c47434353448648F662f4A;
        founderTeam = 0x4722264291289897a9ff5238A24e9D81829C94e3;
        advisers = 0xDbB3FC2EabcbC523cE405477fd9E4457D29346eB;
        companyReserves = 0x5b509a0f4Fef1Dd0C8045A6BFD3ebE06af2C7d6F;
        lpReward = 0xD04faC47C428Ca574F8219eFCE20CF5F41740Bad;
        futuresDevelopment = 0x25A3cf27e208FCd3Ef32d831Be8A61406b0c2cD5;

        usdtContract = 0xA02f6adc7926efeBBd59Fd43A84f4E0c0c91e832;
        maticContract = 0x0000000000000000000000000000000000001010;
        wEthContract = 0xA443C946fE0C620d1Ac754f2e892089B22d06a3D;

        //only work in testnet/main
        priceFeedEthUsd = AggregatorV3Interface(0x0715A7794a1dc8e42615F059dD6e406A6594651A);
        priceFeedMaticUsd = AggregatorV3Interface(0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada);

        _mint(privateSaleBank, 90000000 * 10 ** decimals());
        _mint(publicSaleBank, 150000000 * 10 ** decimals());
        _mint(vurseIncentivizing, 100000000 * 10 ** decimals());
        _mint(marketingPartnership, 170000000 * 10 ** decimals());
        _mint(founderTeam, 100000000 * 10 ** decimals());
        _mint(advisers, 10000000 * 10 ** decimals());
        _mint(companyReserves, 160000000 * 10 ** decimals());
        _mint(lpReward, 100000000 * 10 ** decimals());
        _mint(futuresDevelopment, 55000000 * 10 ** decimals());

    }

    modifier onlyOwner(){
        require(msg.sender == owner, "ERROR: You're not the owner");
        _;
    }

    modifier sixMonthsOpen(){
        require(block.timestamp <= block.timestamp + (30 * 6 * 1 days), "aaaaaaaaaa");
        _;
    }


    //only work in Testnet/main
    // ETH and Matic Price, hardhat vm unable, and require change priceFeed address to work in mainnet and change the import for @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol

    //returns wei
    function ethPriceUsd() public view returns(int256) {
        ( , int256 answer , , ,) = priceFeedEthUsd.latestRoundData();
        return (answer * 10000000000);
    }

    function maticPriceUsd() public view returns(int256){
        ( , int256 answer, , ,) = priceFeedMaticUsd.latestRoundData();
        return (answer * 10000000000);
    }


    function privateSaleBuy(uint _amountINA, uint _paymentChoice)external sixMonthsOpen(){
        require(privateSaleControl, "ERROR: Private sale Locked");
        address userAddress = msg.sender;
        //10 = usdt
        //20 = weth
        //30 = matic
        if(_paymentChoice == 10){
            //the way we make the function for buying with ETH and MATIC is the same as soon as we have the function that returns its price in usd

            ERC20 usdt = ERC20(usdtContract);
            ERC20 ina = ERC20(address(this));

            uint usdtPrice = 160000000000000000; // * private sale supply = $14.400.000 the price need to change for $0,1666667 to private sale supply = $15.000.003 or reform the price and the total supply so as not to break in periodic tithes

            uint usdtTransferAmount = _amountINA * usdtPrice;
            uint INATransferAmount = _amountINA * 10 ** 18;

            require(usdt.balanceOf(userAddress) >= usdtTransferAmount, "ERROR: No balance usdt");
            require(balanceOf(privateSaleBank) > 0, "ERROR: Sold off/finish");
    
            usdt.transferFrom(userAddress, privateSaleBank, usdtTransferAmount);
            ina.transferFrom(privateSaleBank, userAddress, INATransferAmount);
            
            
        }else if(_paymentChoice == 20){
            //OnlyWork in testNet cause function ethPrice dont work in hardhat vm

            ERC20 wEth = ERC20(wEthContract);
            ERC20 ina = ERC20(address(this));

            uint ethPriceDolar = uint(ethPriceUsd());
            uint usdtPrice = 160000000000000000;

            uint ethTransferAmount = ((usdtPrice * 10 ** 18) / ethPriceDolar) * _amountINA;

            uint INATransferAmount =  _amountINA * 10 ** 18;

            require(wEth.balanceOf(userAddress) >= ethTransferAmount, "ERROR: No balance usdt");
            require(balanceOf(privateSaleBank) > 0, "ERROR: Sold off/finish");

            wEth.transferFrom(userAddress, privateSaleBank, ethTransferAmount);
            ina.transferFrom(privateSaleBank, userAddress, INATransferAmount);

        }else if(_paymentChoice == 30){
            //OnlyWork in testNet cause function maticPrice dont work in hardhat vm

            ERC20 matic = ERC20(maticContract);
            ERC20 ina = ERC20(address(this));

            uint maticPriceDolar = uint(maticPriceUsd());
            uint usdtPrice = 160000000000000000;

            uint maticTransferAmount = ((usdtPrice * 10 ** 18) / maticPriceDolar) * _amountINA;
            uint INATransferAmount =  _amountINA * 10 ** 18;

            require(matic.balanceOf(userAddress) >= maticTransferAmount, "ERROR: No balance usdt");
            require(balanceOf(privateSaleBank) > 0, "ERROR: Sold off/finish");

            matic.transferFrom(userAddress, privateSaleBank, maticTransferAmount);
            ina.transferFrom(privateSaleBank, userAddress, INATransferAmount);
        }
    }

  

    function privateSaleUnlock()external onlyOwner(){
        privateSaleControl = true;
    }
    function privateSaleLock()external onlyOwner(){
        privateSaleControl = false;
    }

    function addFromBlacklist(address _address)external onlyOwner(){
        blacklist[_address] = true;
    }
    function removeFromBlacklist(address _address)external onlyOwner(){
        blacklist[_address] = false;
    }
}